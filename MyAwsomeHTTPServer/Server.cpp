#include <iostream>
#include <vector>

#include <boost/bind.hpp>

#include "Server.h"

Server* Server::_me;

Server::Server()
{
	stop = false;
	mg_mgr_init(&mongooseEventManager, NULL);
	connection = mg_bind(&mongooseEventManager, HTTP_PORT, &Server::handler);
	mg_set_protocol_http_websocket(connection);

	httpServerOpts.document_root = ".";  // Serve current directory
	httpServerOpts.enable_directory_listing = "yes";
}

Server::~Server()
{
	mg_mgr_free(&mongooseEventManager);

	if (listeningThread != nullptr) {
		delete listeningThread;
	}
}

void Server::Start()
{
	listeningThread = new std::thread(std::bind(&Server::loop, this));
}

void Server::Stop()
{
	stop = true;
	listeningThread->join();
}

void Server::AddProject(std::string name, std::string path)
{
	if (name.length() > 3) {
		
	}
	else {
		std::cout << "Project name length must be greater than 3" << std::endl;
	}
}

void Server::RemoveProject(std::string name)
{
	if (name.length() > 3) {
		
	}
	else {
		std::cout << "Project name length must be greater than 3" << std::endl;
	}
}

Server* Server::Instance()
{
	if (_me == nullptr) {
		_me = new Server();
	}

	return _me;
}

void Server::handler(struct mg_connection *connection, int ev, void *message)
{
	if (ev == MG_EV_HTTP_REQUEST) {
		struct http_message *hm = (struct http_message *) message;

		//Parse URI
		char* copy = (char*)malloc(sizeof(char) * hm->uri.len + 1); 
		memcpy_s(copy, hm->uri.len, hm->uri.p, hm->uri.len);
		copy[hm->uri.len] = '\0';

		char * token;
		char* context = NULL;
		token = strtok_s(copy, "/", &context);
		std::vector<char*> elem;
		while (token != NULL)
		{
			elem.push_back(token);
			token = strtok_s(NULL, "/", &context);
		}

		//Project is at first element
		if (elem.size() > 0) {
			//First item is the project label
			mg_send_head(connection, 200, strlen("Project found"), "Content-Type: text/plain");
			mg_printf(connection, "%s", "Project found");
		}
		else {
			mg_send_head(connection, 404, strlen("Not found"), "Content-Type: text/plain");
			mg_printf(connection, "%s", "Not found");
		}

		free(copy);
		free(token);
	}
}

void Server::loop()
{
	while (!stop) {
		mg_mgr_poll(&mongooseEventManager, 1000);
	}
}
